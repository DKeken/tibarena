/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/api/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get: operations["AppController_getHealth"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/users": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get all users */
    get: operations["UsersController_findAll"];
    put?: never;
    /** Create new user */
    post: operations["UsersController_create"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/users/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user by id */
    get: operations["UsersController_findOne"];
    put?: never;
    post?: never;
    /** Delete user */
    delete: operations["UsersController_remove"];
    options?: never;
    head?: never;
    /** Update user */
    patch: operations["UsersController_update"];
    trace?: never;
  };
  "/api/users/email/{email}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user by email */
    get: operations["UsersController_findByEmail"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/users/username/{username}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get user by username */
    get: operations["UsersController_findByUsername"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/nonce": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Get nonce for Ethereum wallet authentication */
    post: operations["AuthController_getNonce"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/login": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Authenticate using Ethereum wallet signature */
    post: operations["AuthController_login"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/refresh": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Refresh access token */
    post: operations["AuthController_refreshToken"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/auth/logout": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /** Log out the current user */
    post: operations["AuthController_logout"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/example/protected": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get protected user data */
    get: operations["ExampleController_getProtectedData"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/api/jwt-example/protected": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** Get protected user data using JWT */
    get: operations["SimplifiedExampleController_getProtectedData"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    CreateUserDto: {
      /**
       * @description Username of the user
       * @example john_doe
       */
      username: string;
      /**
       * @description Email address of the user
       * @example john.doe@example.com
       */
      email?: string;
      /**
       * @description Password for email authentication
       * @example StrongP@ss123
       */
      password?: string;
      /**
       * @description Hashed password of the user (auto-generated, don't provide it directly)
       * @example $2b$10$abcdefghijklmnopqrstuvwxyz123456789
       */
      readonly passwordHash?: string;
      /**
       * @description Ethereum wallet address for wallet-based authentication
       * @example 0x742d35Cc6634C0532925a3b844Bc454e4438f44e
       */
      walletAddress?: string;
      /**
       * @description Authentication nonce for the user (auto-generated, don't provide it directly)
       * @example a1b2c3d4e5f6
       */
      readonly authNonce?: string;
    };
    UpdateUserDto: {
      /**
       * @description Username of the user
       * @example john_doe
       */
      username?: string;
      /**
       * @description Email address of the user
       * @example user@example.com
       */
      email?: string;
      /**
       * @description Password of the user (will be hashed)
       * @example StrongP@ssw0rd
       */
      password?: string;
      /**
       * @description Blockchain wallet address of the user
       * @example 0x1234567890abcdef1234567890abcdef12345678
       */
      walletAddress?: string;
    };
    GetNonceDto: {
      /** @description Ethereum wallet address */
      address: string;
    };
    NonceResponseDto: {
      /**
       * @description Indicates if the logout was successful
       * @example true
       */
      success: boolean;
      /**
       * @description Nonce to be signed
       * @example 123456789
       */
      nonce: string;
    };
    LoginDto: {
      /** @description Ethereum wallet address */
      address: string;
      /** @description Signed message containing the nonce */
      signature: string;
      /** @description The full message that was signed */
      message?: string;
    };
    UserResponseDto: {
      /**
       * @description User ID
       * @example 550e8400-e29b-41d4-a716-446655440000
       */
      id: string;
      /**
       * @description Ethereum wallet address
       * @example 0x71C7656EC7ab88b098defB751B7401B5f6d8976F
       */
      walletAddress: string;
      /**
       * @description Username
       * @example crypto_enthusiast
       */
      username?: string;
      /**
       * @description User profile image URL
       * @example https://example.com/avatar.png
       */
      imageUrl?: string;
    };
    LoginResponseDto: {
      /**
       * @description Authentication success status
       * @example true
       */
      success: boolean;
      /** @description Authenticated user information */
      user: components["schemas"]["UserResponseDto"];
    };
    LogoutResponseDto: {
      /**
       * @description Indicates if the logout was successful
       * @example true
       */
      success: boolean;
      /**
       * @description Message describing the result of the logout operation
       * @example Logged out successfully
       */
      message: string;
    };
  };
  responses: never;
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  AppController_getHealth: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findAll: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return all users */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_create: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["CreateUserDto"];
      };
    };
    responses: {
      /** @description User successfully created */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Bad request */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findOne: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return user by id */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_remove: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description User successfully deleted */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_update: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        id: string;
      };
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["UpdateUserDto"];
      };
    };
    responses: {
      /** @description User successfully updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findByEmail: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        email: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return user by email */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  UsersController_findByUsername: {
    parameters: {
      query?: never;
      header?: never;
      path: {
        username: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Return user by username */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description User not found */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_getNonce: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["GetNonceDto"];
      };
    };
    responses: {
      /** @description Nonce generated successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["NonceResponseDto"];
        };
      };
      /** @description Invalid wallet address */
      400: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_login: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": components["schemas"]["LoginDto"];
      };
    };
    responses: {
      /** @description Authentication successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LoginResponseDto"];
        };
      };
      /** @description Invalid signature */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_refreshToken: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Token refreshed successfully */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      /** @description Invalid refresh token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  AuthController_logout: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Logout successful */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["LogoutResponseDto"];
        };
      };
    };
  };
  ExampleController_getProtectedData: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved protected data */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example You have access to this protected resource */
            message?: string;
            user?: {
              /** @example 1234567890 */
              id?: string;
              /** @example 0x1234567890abcdef1234567890abcdef12345678 */
              walletAddress?: string;
              /** @example user123 */
              username?: string;
            };
          };
        };
      };
      /** @description Unauthorized - Invalid or missing authentication */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  SimplifiedExampleController_getProtectedData: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Successfully retrieved protected data */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example You have access to this JWT-protected resource */
            message?: string;
            user?: {
              /** @example 1234567890 */
              id?: string;
              /** @example 0x1234567890abcdef1234567890abcdef12345678 */
              walletAddress?: string;
              /** @example user123 */
              username?: string;
            };
          };
        };
      };
      /** @description Unauthorized - Invalid or missing JWT token */
      401: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
}
